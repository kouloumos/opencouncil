// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector"), postgis(version: "3.3.5")]
}
model City {
  id        String   @id @default(cuid())
  name      String   // Αθήνα
  name_en   String   // Athens
  name_municipality String // Δήμος Αθηναίων
  name_municipality_en String // Municipality of Athens
  logoImage String?
  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  officialSupport Boolean @default(false)
  isListed Boolean @default(false)
  isPending Boolean @default(false)
  authorityType AuthorityType @default(municipality)
  wikipediaId String?
  geometry Unsupported("geometry")?

  parties        Party[]
  persons        Person[]
  councilMeetings CouncilMeeting[]
  administrators Administers[]

  @@index([isPending, isListed])
}

enum AuthorityType {
  municipality
  region
}

model Party {
  id        String   @id @default(cuid())
  name      String
  name_en   String
  name_short String
  name_short_en String
  colorHex  String
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  persons Person[]
  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String

  administrators Administers[]

  @@index([cityId])
}

model Person {
  id        String   @id @default(cuid())
  name  String
  name_en String
  name_short String
  name_short_en String
  image     String?
  role      String?
  role_en   String?
  isAdministrativeRole Boolean @default(false)
  activeFrom DateTime?
  activeTo DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileUrl String?

  speakerTags SpeakerTag[]

  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String
  party  Party? @relation(fields: [partyId], references: [id], onDelete: SetNull)
  partyId String?

  administrators Administers[]

  @@index([cityId])
  @@index([partyId])
}

model CouncilMeeting {
  id        String   @default(cuid())
  name      String
  name_en   String
  dateTime  DateTime
  youtubeUrl String
  videoUrl String?
  audioUrl String?
  muxPlaybackId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  released  Boolean  @default(false)

  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String

  taskStatuses TaskStatus[]
  speakerSegments SpeakerSegment[]
  highlights Highlight[]
  subjects Subject[]
  podcastSpecs PodcastSpec[]

  @@id([cityId, id])
  @@unique([cityId, id])

  @@index([dateTime])
  @@index([released])
}

model TaskStatus {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("pending")
  stage     String?
  percentComplete Float?
  type      String
  requestBody String
  responseBody String?

  councilMeeting   CouncilMeeting @relation(fields: [councilMeetingId, cityId], references: [id, cityId], onDelete: Cascade)
  councilMeetingId String
  cityId            String

  @@index([councilMeetingId, cityId])
}

model SpeakerTag {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  label           String?

  person Person? @relation(fields: [personId], references: [id], onDelete: SetNull)
  personId String?

  speakerSegments SpeakerSegment[]

  @@index([personId])
}

model SpeakerSegment {
  id              String   @id @default(cuid())
  startTimestamp  Float
  endTimestamp    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  meeting   CouncilMeeting @relation(fields: [meetingId, cityId], references: [id, cityId], onDelete: Cascade)
  meetingId String
  cityId String

  speakerTag SpeakerTag @relation(fields: [speakerTagId], references: [id], onDelete: Cascade)
  speakerTagId String
  embedding Unsupported("vector")?

  utterances Utterance[]

  topicLabels TopicLabel[]
  summary Summary?

  subjects SubjectSpeakerSegment[]

  @@index([meetingId, cityId, startTimestamp])
  @@index([speakerTagId])

}

model Utterance {
  id              String   @id @default(cuid())
  startTimestamp  Float
  endTimestamp    Float
  text            String
  drift           Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String
  uncertain Boolean @default(false)

  words Word[]
  highlightedUtterances HighlightedUtterance[]
  podcastPartAudioUtterances PodcastPartAudioUtterance[]
  @@index([speakerSegmentId, startTimestamp])
}

model Word {
  id              String   @id @default(cuid())
  text            String
  startTimestamp  Float
  endTimestamp    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  confidence      Float    @default(1)

  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String

  @@index([utteranceId, startTimestamp])
}

model TopicLabel {
  id        String   @id  @default(cuid())

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([speakerSegmentId, topicId])
}

model Topic {
  id        String   @id  @default(cuid())
  name      String
  name_en   String
  colorHex  String
  icon      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicLabels TopicLabel[]
  subjects Subject[]
}

model Summary {
  id        String   @id  @default(cuid())
  text      String

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([speakerSegmentId])
}

model Subject {
  id        String   @id  @default(cuid())
  name      String
  description String

  cityId String
  councilMeetingId String

  hot Boolean @default(false)
  agendaItemIndex Int?
  topicId String?
  locationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  councilMeeting CouncilMeeting @relation(fields: [cityId, councilMeetingId], references: [cityId, id], onDelete: Cascade)
  topic Topic? @relation(fields: [topicId], references: [id], onDelete: SetNull)

  location Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  highlights Highlight[]
  speakerSegments SubjectSpeakerSegment[]
}

enum LocationType {
  point
  lineString
  polygon
}

model Location {
  id        String   @id  @default(cuid())
  type LocationType
  text String
  coordinates Unsupported("geometry")

  subjects Subject[]
}

model SubjectSpeakerSegment {
  id        String   @id  @default(cuid())

  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String
  summary String?

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Highlight {
  id        String   @id  @default(cuid())
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting   CouncilMeeting @relation(fields: [meetingId, cityId], references: [id, cityId], onDelete: Cascade)
  meetingId String
  cityId String

  highlightedUtterances HighlightedUtterance[]
  
  subject Subject? @relation(fields: [subjectId], references: [id], onDelete: SetNull)
  subjectId String?

  videoUrl String?

  @@index([meetingId, cityId])
}

model HighlightedUtterance {
  id        String   @id  @default(cuid())
  
  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String

  highlight Highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)
  highlightId String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PodcastSpec {
  id        String   @id  @default(cuid())
  councilMeetingId String
  cityId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting   CouncilMeeting @relation(fields: [councilMeetingId, cityId], references: [id, cityId], onDelete: Cascade)
  parts PodcastPart[]
}

enum PodcastPartType {
  HOST
  AUDIO
}

model PodcastPart {
  id        String   @id  @default(cuid())
  type PodcastPartType
  text String?
  audioSegmentUrl String?
  duration Float?
  startTimestamp Float?
  endTimestamp Float?
  index Int

  podcastSpec PodcastSpec @relation(fields: [podcastSpecId], references: [id], onDelete: Cascade)
  podcastSpecId String

  podcastPartAudioUtterances PodcastPartAudioUtterance[]
}

model PodcastPartAudioUtterance {
  id        String   @id  @default(cuid())

  podcastPart PodcastPart @relation(fields: [podcastPartId], references: [id], onDelete: Cascade)
  podcastPartId String

  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String
}

model Offer {
  id        String   @id  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String   @default("pilot")

  startDate DateTime
  endDate DateTime

  recipientName String
  platformPrice Float
  ingestionPerHourPrice Float
  hoursToIngest Int
  discountPercentage Float
  meetingsToIngest Int?
  cityId String?

  correctnessGuarantee Boolean @default(false)
  respondToEmail String
  respondToPhone String
  respondToName String

}

model Waitlist {
  id        String   @id  @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String
  municipalityIds String // comma-separated list of integers for now
}

// Users and authentication


model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  phone         String?
  onboarded     Boolean         @default(false)
  allowContact  Boolean         @default(false)
  isSuperAdmin  Boolean         @default(false)
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  administers   Administers[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Administers {
  
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  cityId    String?
  partyId   String?
  personId  String?
  
  city      City?    @relation(fields: [cityId], references: [id], onDelete: Cascade)
  party     Party?   @relation(fields: [partyId], references: [id], onDelete: Cascade)
  person    Person?  @relation(fields: [personId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, cityId, partyId, personId])
}