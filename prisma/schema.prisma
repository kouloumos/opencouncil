// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [pgvector(map: "vector")]
}

model City {
  id        String   @id @default(cuid())
  name      String   // Αθήνα
  name_en   String   // Athens
  name_municipality String // Δήμος Αθηναίων
  name_municipality_en String // Municipality of Athens
  logoImage String
  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  officialSupport Boolean @default(false)
  isListed Boolean @default(false)

  parties        Party[]
  persons        Person[]
  councilMeetings CouncilMeeting[]
}

model Party {
  id        String   @id @default(cuid())
  name      String
  name_en   String
  name_short String
  name_short_en String
  colorHex  String
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  persons Person[]
  city City @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String

  @@index([cityId])
}

model Person {
  id        String   @id @default(cuid())
  name  String
  name_en String
  name_short String
  name_short_en String
  image     String?
  role      String?
  role_en   String?
  activeFrom DateTime?
  activeTo DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  speakerTags SpeakerTag[]

  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String
  party  Party? @relation(fields: [partyId], references: [id], onDelete: SetNull)
  partyId String?

  @@index([cityId])
  @@index([partyId])
}

model CouncilMeeting {
  id        String   @default(cuid())
  name      String
  name_en   String
  dateTime  DateTime
  youtubeUrl String
  videoUrl String?
  audioUrl String?
  muxPlaybackId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  released  Boolean  @default(false)

  city   City   @relation(fields: [cityId], references: [id], onDelete: Cascade)
  cityId String

  taskStatuses TaskStatus[]
  speakerSegments SpeakerSegment[]
  highlights Highlight[]

  @@id([cityId, id])
  @@unique([cityId, id])

  @@index([dateTime])
  @@index([released])
}

model TaskStatus {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("pending")
  stage     String?
  percentComplete Float?
  type      String
  requestBody String
  responseBody String?

  councilMeeting   CouncilMeeting @relation(fields: [councilMeetingId, cityId], references: [id, cityId], onDelete: Cascade)
  councilMeetingId String
  cityId            String

  @@index([councilMeetingId, cityId])
}

model SpeakerTag {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  label           String?

  person Person? @relation(fields: [personId], references: [id], onDelete: SetNull)
  personId String?

  speakerSegments SpeakerSegment[]

  @@index([personId])
}

model SpeakerSegment {
  id              String   @id @default(cuid())
  startTimestamp  Float
  endTimestamp    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  meeting   CouncilMeeting @relation(fields: [meetingId, cityId], references: [id, cityId], onDelete: Cascade)
  meetingId String
  cityId String

  speakerTag SpeakerTag @relation(fields: [speakerTagId], references: [id], onDelete: Cascade)
  speakerTagId String
  embedding Unsupported("vector")?

  utterances Utterance[]

  topicLabels TopicLabel[]
  summary Summary?

  @@index([meetingId, cityId, startTimestamp])
  @@index([speakerTagId])

}

model Utterance {
  id              String   @id @default(cuid())
  startTimestamp  Float
  endTimestamp    Float
  text            String
  drift           Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String

  words Word[]
  highlightedUtterances HighlightedUtterance[]

  @@index([speakerSegmentId, startTimestamp])
}

model Word {
  id              String   @id @default(cuid())
  text            String
  startTimestamp  Float
  endTimestamp    Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  confidence      Float    @default(1)

  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String

  @@index([utteranceId, startTimestamp])
}

model TopicLabel {
  id        String   @id  @default(cuid())

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String

  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([speakerSegmentId, topicId])
}

model Topic {
  id        String   @id  @default(cuid())
  name      String
  name_en   String
  colorHex  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  topicLabels TopicLabel[]
}

model Summary {
  id        String   @id  @default(cuid())
  text      String

  speakerSegment SpeakerSegment @relation(fields: [speakerSegmentId], references: [id], onDelete: Cascade)
  speakerSegmentId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([speakerSegmentId])
}

model Highlight {
  id        String   @id  @default(cuid())
  name      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meeting   CouncilMeeting @relation(fields: [meetingId, cityId], references: [id, cityId], onDelete: Cascade)
  meetingId String
  cityId String

  highlightedUtterances HighlightedUtterance[]

  @@index([meetingId, cityId])
}

model HighlightedUtterance {
  id        String   @id  @default(cuid())
  
  utterance Utterance @relation(fields: [utteranceId], references: [id], onDelete: Cascade)
  utteranceId String

  highlight Highlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)
  highlightId String

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
